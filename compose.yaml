# name: btlz-test

networks:
  postgres-net:
    driver: bridge

volumes:
  postgres-vol:
    driver: local

services:

  postgres:
    container_name: postgres

    image: postgres:16.1-alpine

    environment:
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata

    volumes:
      - postgres-vol:/var/lib/postgresql/data

    networks:
      - postgres-net

    expose:
      - ${POSTGRES_PORT}

    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    restart: on-failure


  app:
    container_name: app
  
    command: >
         sh -c "
          echo 'Waiting for PostgreSQL to be ready...';
          node dist/wait-for-db.js;
          echo 'PostgreSQL is ready!';
          node dist/app.js
          "

    build:
      context: .
      dockerfile: Dockerfile

    # Load environment variables from .env file
    env_file:
      - .env

    environment:
      # These are still needed to override the default values in env.ts
      # and ensure the app connects to the 'postgres' service within Docker network
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APP_PORT: ${APP_PORT}
      NODE_ENV: production # Keep this explicitly set for production build

    ports:
      - ${APP_PORT}:${APP_PORT}

    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres-net

    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 5
    restart: on-failure
